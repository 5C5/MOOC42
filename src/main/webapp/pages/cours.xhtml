
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="/templates/template.xhtml">

    <ui:define name="head"></ui:define>
    
    <ui:define name="title">#{fr['general.cours.title']}</ui:define>

    <ui:define name="body-site">
 		<p:panel header="#{fr['general.cours.title']}" style="font-family:Helvetica; width:100%">
       		<h:form >    
                <p:accordionPanel multiple="true"  id="panelGeneral" style="font-size: 16px; padding: 8px; margin : 12px;">
                    <p:tab title="#{fr['cours.intro.title']}" style="padding: 8px; margin : 12px;">
                        <h:panelGrid columns="1" style="width:100%;">
	                            <p:outputPanel style="font-size: 16px;">
	                            Les portes logiques sont des composants électroniques qui constituent la base de tous les circuits électroniques. 
	                            On trouve par exemple des portes logiques dans ordinateurs, les téléphones, etc. 
	                            Ces composants sont des réalisations physiques de fonctions de l’algèbre de Boole, qui manipule des nombres binaires.
	                            </p:outputPanel>
	
	                            <p:fieldset legend="#{fr['cours.intro.binary.title']}"  style="font-size: 16px; padding: 8px; margin : 12px;">
	                      		A leur plus bas niveau, c’est à dire ceux de leurs composants, les appareils électroniques ne sont 
	                      		capables que de “comprendre” et de manipuler qu’une seule informations, la présence (ou l’absence) 
	                      		de courant électrique. La présence de courant électrique est matérialisée par une tension électrique 
	                      		positive et l’absence de courant électrique est matérialisée par une tension nulle. Par convention, 
	                      		une tension nulle est notée 0 et une tension positive est notée 1. 
								<BR /><BR />
								Pour réaliser les calculs nécessaires à leur fonctionnement, les circuits électroniques 
								vont donc uniquement manipuler ces 0 et ces 1. On dit que ces composants électroniques 
								fonctionnent en système binaire car il n’y a que deux valeurs possible pour les entrées 
								et sorties des calculs, 0 et 1.
								<BR /><BR />
								Si vous voulez plus d’informations sur le système binaire, 
								vous pouvez consulter l’article <a href="https://fr.wikipedia.org/wiki/Syst%C3%A8me_binaire">Wikipédia</a> à ce sujet. 
								</p:fieldset>
					
								<p:fieldset legend="L’algèbre de Boole, c’est quoi ?" style="font-size: 16px; padding: 8px; margin : 12px;">
				
								L’algèbre de Boole est une branche des mathématiques qui permet, à l’image de l’algèbre 
								classique qui propose de réaliser des opérations mathématiques sur des nombres, de réaliser 
								des calculs sur des variables logiques. Les variables logiques sont des variables qui ne peuvent 
								prendre que deux valeurs, VRAI ou FAUX  ( 1 ou 0). L’algèbre de Boole permet donc, par extension, 
								de réaliser des calculs en binaire puisque dans ce système, il n’existe que des 0 et des 1.
								<BR/>
								Étant donné le faible nombre de combinaisons possibles d’entrées, 
								on utilise pour décrire une opération un tableau nommé table de vérité qui 
								comporte toutes les combinaisons possibles d’entrées et les résultats associés.
								 
								L’algèbre de Boole propose 3 opérations binaires : 
								<!-- Conjonction -->
								<p:fieldset legend="Conjonction (ET)" style="padding: 8px; margin : 12px;" toggleable="true" collapsed="true">
									<h:panelGrid columns="1">
									<p>La conjonction est une opération qui prend deux opérandes, 
									c’est à dire deux valeurs, en entrée. Elle renvoie 1 seulement si les deux opérandes sont égales à 1. 
									Dans les autres cas, elle renvoie le résultat 0.</p>
									<p>Voici la table de vérité de l'opération ET : </p>
									<p:graphicImage name="img/operation_ET.png" title="Symbole porte AND"/>
									</h:panelGrid>
								</p:fieldset>
								
								<!-- Disjonction -->
								<p:fieldset legend="Disjonction (OU)" style="padding: 8px; margin : 12px;" toggleable="true" collapsed="true">
									<h:panelGrid columns="1">
									<p>La disjonction est une opération qui prend deux opérandes en entrée.
									Elle renvoie 1 quand l’une des deux opérandes est égale à 1.</p>
									<p>Voici la table de vérité de l'opération OU : </p>
				    				<p:graphicImage name="img/operation_OU.png" title="table de vérité de l'opération OU"/>
									</h:panelGrid>
								</p:fieldset>
								
								<!-- Negation -->
								<p:fieldset legend="Négation (NON)" style="padding: 8px; margin : 12px;" toggleable="true" collapsed="true">
									<h:panelGrid columns="1" cellspacing="2" cellpadding="2">
									<p>La négation est une opération qui ne prend qu’une seule opérande. 
									Elle a pour but de renvoyer l’inverse de la valeur d’entrée, 
									c’est à dire qu’elle renverra 0 si l’entrée est 1 et 1 si l’entrée est 0.</p>
									<p>Voici la table de vérité de l'opération NON : </p>
									<p:graphicImage name="img/operation_NON.png" title="table de vérité de l'opération NON"/> 
									</h:panelGrid>
								</p:fieldset>
						
								Si vous voulez plus d’informations sur l’algèbre de Boole, 
								vous pouvez consulter l’article <a href="https://fr.wikipedia.org/wiki/Alg%C3%A8bre_de_Boole_(logique)">Wikipédia</a> à ce sujet.
								<br/>
								<br/>
								</p:fieldset>
								
						Les portes logiques sont des réalisations physiques de ces opérateurs booléens, 
						elles vont, en fonction des tensions électriques présentes aux entrées et de l’opération que l’on cherche à réaliser, 
						faire passer ou non le courant pour signifier le résultat du calcul.
						<br/>
						<br/>
						Elles vont permettre aux circuits électroniques de réaliser les calculs nécessaires à l’accomplissement de leurs tâches.
						Il existe différentes portes logiques correspondant aux différentes opérations de l’algèbre de Boole.
						<br/>
						<br/>
						Dans ce cours, nous allons présenter les différentes portes logiques existantes et vous apprendre à les manipuler.
	                    </h:panelGrid>
                    </p:tab>
                     
                     <p:tab title="#{fr['cours.portes_fond.title']}" >
                        <h:panelGrid columns="1" style="width:100%; padding: 8px; margin : 12px;">
                            <p:outputPanel>La porte AND (ou ET) correspond à l’opération ET de l’algèbre de Boole que nous avons vu dans l’introduction de ce cours.
                             Comme pour les opérations booléennes, 
                             il est possible de présenter les résultats renvoyés par une porte logique dans une table de vérité.
                            </p:outputPanel>
                            <p:outputPanel>
                            La porte AND peut-être représentée par ce symbole : 
                            </p:outputPanel>
                            <p:graphicImage name="img/symbole_AND.png" title="Symbole porte AND"/>
                             <p:outputPanel>
                            Tout comme pour les fonctions booléennes, le meilleur moyen de décrire le 
                            fonctionnement d’une porte logique est de donner sa table de vérité. 
                            Voici donc la table de vérité de la porte AND, on peut constater qu’elle est 
                            identique à celle de la fonction ET.
                            </p:outputPanel>
        		    		<p:graphicImage name="img/porte_AND.png" title="table de vérité AND"/>
        		    		<p:outputPanel>
        		    		La porte AND prend deux valeurs en entrée et donne une valeur en sortie.
        		    		</p:outputPanel>
                        </h:panelGrid>
                        <p:tab title="#{fr['cours.ou.title']}" >
	                        <h:panelGrid columns="1" style="width:100%; padding: 8px; margin : 12px;">
	                            <p>
	                            	La porte OR est la réalisation physique de la fonction booléenne OU.
	                            </p>
	                            <p:graphicImage name="img/symbole_OR.png" title="Symbole de la porte OR"/>
				    			<p:graphicImage name="img/porte_OR.png" title="Voici la table de vérité de l’opération OU :"/>
	                        </h:panelGrid>
                     	</p:tab>
                     
                     </p:tab>
                    
                     <p:tab title="#{fr['cours.combinaisons.title']}">
                     <h:panelGrid>
                     	Pour réaliser des circuits électroniques complexes,
                     	 on ne peut pas se contenter d’utiliser indépendamment les différentes portes. 
                     	 Il peut être intéressant de les combiner pour réaliser des calculs plus complexes. 
                     	Certaines portes sont même parfois des combinaisons d’autres portes (NAND = AND + NOT)
                     </h:panelGrid>
                     </p:tab>
                     
                     <p:tab title="#{fr['cours.portes_complx.title']}">
                     <h:panelGrid>
                     </h:panelGrid>
                     </p:tab>
                     
                     <p:tab title="#{fr['cours.further.title']}">
                     	<h:panelGrid columns="1">
                     		Les portes logiques sont donc des composants électroniques utilisés dans …. (lien vidéo Minecraft)
                     	</h:panelGrid>
                     </p:tab>
                     
                     <p:tab title="#{fr['cours.biblio.title']}">
                     	<h:panelGrid columns="1">
                     		Pour réaliser ce cours sur les portes logiques, nous avons utilisé les ressources suivantes : 
                     	</h:panelGrid>
                     </p:tab>
                </p:accordionPanel>
	        </h:form> 
	    </p:panel>  
	    </ui:define>

</ui:composition>
